program = all:(i:statement ws?)* { return all.map(i => i[0])  }

equal = "="
assign_equal = "="
digit  = [0-9]
digit_19 = [1-9]
up_to_16 = n:digit { return parseInt(n) } / [1] [0-6] { return parseInt(text()) }
hex = [0-9a-f]i
hex_pair = [0-9a-f]i [0-9a-f]i { return parseInt(text(), 16) }
byte32 = "0x" hex hex hex hex hex hex hex hex { return _.toInt32(parseInt(text())) }
integer = digit_19 digit* { return parseInt(text()) }
int32 = "0" { return _.toInt32(0) } / integer { return _.toInt32(parseInt(text())) }
byte = "0x" value:(hex hex) { return parseInt(text(), 16) }
false = "false" { return 0; }
true  = "true"  { return 1; }
ws = [ \t\n\r]*
space = [ ]
spaces =  [ ]+
newline = [\n\r]
quote = "'"
alpha = [a-z]i
alpha_or_number  = [a-z0-9]i
dash = [_-]
string = quote chars:[^']* quote { return chars.map(s => String(s).charCodeAt(0)).concat([0]); }
variable = "var $" name:(alpha alpha_or_number*) { return new T.CreateReference(name[0] + name[1].join('')); }
variable_reference = "$" name:(alpha alpha_or_number*) { return new T.Reference(name[0] + name[1].join('')); }
pin = "pin " up_to_16 { return parseInt(text().replace('pin ', '')) } / "@" pin:up_to_16 { return parseInt(pin) }
instruction_terminator = spaces? newline / spaces? ";"

eval =
  eval_int32 / eval_string / eval_byte

eval_string =
  type:"str" space? "`" code:[^`]* "`" {
    const v = Function('_', 'return 0,' + code.join(''))(_)
    return { type, value: String(v).split('').concat([0]) };
  }

eval_byte =
  type:"byte" space? "`" code:[^`]* "`" {
    const v = Function('_', 'return 0,' + code.join(''))(_)
    return { type, value: [parseInt(v)] };
  }

eval_int32 =
  type:"int" space? "`" code:[^`]* "`" {
    const v = Function('_', 'return 0,' + code.join(''))(_)
    return { type, value: _.toInt32(parseInt(v)) };
}

statement =
  label / comment / i:instruction instruction_terminator { return i } / i:instruction spaces? comment { return i }

comment =
  "//" (space? ([^\n])*)? newline { return new T.SkipNode() }

label =
  "@" label:(alpha (alpha/digit/dash)*) { return new T.LabelNode({ label: text().trim() }) }

label_reference =
  "@" label:(alpha (alpha/digit/dash)*) { return new T.LabelReferenceNode({ label: text().trim() }) }

instruction =
  noop / exit / sysinfo / dump / restart / yield / debug / assign_value / delay / unary_operation / jump / io / literal

literal =
  "raw" space quote bytes:(v:hex_pair space? { return v })* quote { return new T.ByteNode({ rawBinary: bytes })}

noop =
  "noop" { return new T.NoopNode() }

exit =
  "exit" { return new T.HaltNode() }

sysinfo =
  ("print system info" / "sysinfo") { return new T.SysInfoNode() }

dump =
  "dump" { return new T.DumpNode() }

restart =
  "restart" { return new T.RestartNode() }

yield =
  "yield" { return new T.YieldNode() }

debug =
  "enable logs" { return new T.DebugNode({ value: 1 }) } / "disable logs" { return new T.DebugNode({ value: 0 }) }

assign_value =
  variable_assign_value / variable_assign_memory / variable_assign_byte / variable_assign_int /
  variable_assign_variable / variable_assign_pin / pin_assign_variable / memory_assign_variable /
  variable_create

variable_create =
  variable:variable {
    return [ variable, new T.PushByteNode({ variable, value: 0 }) ];
  }

variable_assign_value =
  variable:variable_reference spaces assign_equal spaces e:eval {
    switch (e.type) {
      case 'str':
        throw new Error('Assignment to string not supported')

      case 'int':
        return [ variable, new T.PushIntegerNode({ variable, value: e.value }) ];

      case 'byte':
        return [ variable, new T.PushByteNode({ variable, value: e.value[0] & 0xff }) ];
    }
  }

variable_assign_memory =
  variable:variable_reference spaces assign_equal spaces "**" address:byte32 { return [variable, new T.MemoryReadNode({ variable, address })] } /
  variable:variable_reference spaces assign_equal spaces "**" address:eval { return [variable, new T.MemoryReadNode({ variable, address: address.value })] }

memory_assign_variable =
  "**" address:byte32 spaces "=" spaces variable:variable_reference { return [variable, new T.MemoryWriteNode({ variable, address })] } /
  "**" address:eval spaces assign_equal spaces variable:variable_reference { return [variable, new T.MemoryWriteNode({ variable, address: address.value })] }

variable_assign_int =
  variable:variable_reference spaces assign_equal spaces value:int32 { return [variable, new T.PushIntegerNode({ variable, value })] }

variable_assign_byte =
  variable:variable_reference spaces assign_equal spaces value:byte { return [variable, new T.PushByteNode({ variable, value })] }

variable_assign_variable =
  target:variable_reference spaces assign_equal spaces source:variable_reference { return [target, source, new T.CopyNode({ target, source })] }

variable_assign_pin =
  variable:variable_reference spaces assign_equal spaces pin:pin { return [variable, new T.IoReadNode({ variable, pin })] } /
  "read" spaces pin:pin spaces "into" spaces variable:variable { return [variable, new T.IoReadNode({ variable, pin })] }

pin_assign_variable =
  pin:pin spaces assign_equal spaces variable:variable_reference { return [variable, new T.IoWriteNode({ variable, pin })] } /
  "write" spaces variable:variable_reference spaces "to" spaces pin:pin { return [variable, new T.IoWriteNode({ variable, pin })] }

delay =
  "wait" spaces variable:variable_reference { return [variable, new T.DelayVariableNode({ variable })] } /
  "wait" spaces delay:int32 { return new T.DelayNode({ delay }) }

print =
  "print" spaces string:string { return new T.PrintNode({ string }) }

unary_operation =
  not / increment / decrement

not =
  "invert" spaces variable:variable_reference { return [variable, new T.NotNode({ variable })] } /
  "!!" variable:variable_reference { return [variable, new T.NotNode({ variable })] } /
  "!!" pin:pin {
    const variable = new T.CreateReference('io');
    return [
      variable,
      new T.IoReadNode({ variable, pin }),
      new T.NotNode({ variable }),
      new T.IoWriteNode({ variable, pin })
    ]
  }

increment =
  "++" variable:variable_reference { return [variable, new T.IncrementNode({ variable })] }

decrement =
  "--" variable:variable_reference { return [variable, new T.DecrementNode({ variable })] }

jump =
  jump_if / jump_to

jump_to =
  "jump to" spaces label:label_reference { return [label, new T.JumpNode({ label })] }

jump_if =
  "jump if" spaces variable:variable_reference spaces "to" spaces label:label_reference { return [variable, label, new T.JumpIfNode({ label, variable })] }

io =
  io_mode / io_type / io_only_outputs

io_only_outputs
  = "io only outputs" { return new T.IoAllOutputNode() }

pin_mode =
  mode:("input"/"output"/"open drain"/"pull-up-input") { return text() }

io_mode =
  "io mode" spaces pin:pin spaces mode:pin_mode {
    const variable = new T.CreateReference('io');
    const value = ["input", "output", "open drain", "pull-up-input"].indexOf(mode);
    return [
      variable,
      new T.PushByteNode({ variable, value }),
      new T.IoModeNode({ variable, pin })
    ]
  }

pin_type =
  "io" / "tx" / "rx"

io_type =
  "io type" spaces pin:pin spaces type:pin_type
  {
    const variable = new T.CreateReference('io');
    return [
      variable,
      new T.PushByteNode({ variable, value: T.IoTypeNode.ofType(pin, type) }),
      new T.IoTypeNode({ variable, pin })
    ]
  }
